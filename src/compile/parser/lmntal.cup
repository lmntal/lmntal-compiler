/* ----------------------Preliminary Declarations Section--------------------*/
/* Import the class java_cup.runtime.*  */

package compile.parser;

import java.util.LinkedList;
import compile.parser.MySymbol;

parser code {: 
	public void report_error(String message, Object info) {
		System.err.print(message);
		if (info instanceof MySymbol) {
			MySymbol symbol = (MySymbol)info;
			System.err.print(" : Unexpected Token <" + symbol.token + "> at line " + symbol.left);
		}
		System.err.println();
    }

    public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws Exception {
    	report_fatal_error("Couldn't repair and continue parse", null);
	}
    
:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */
// 綴りの単項演算子 (lognot) は，現状の文法では lognot(a,a) などの曖昧性の排除が難しいので断念 (ueda)
terminal		COMMA, LPAREN, RPAREN, LBRACE,
				RBRACE, RBRACE_SLASH, RBRACE_AT, RBRACE_SLASH_AT,
				RBRACE_UNDERBAR, RBRACE_UNDERBAR_SLASH,
				RBRACE_UNDERBAR_AT, RBRACE_UNDERBAR_SLASH_AT,
				RBRACE_ASTERISK,
				COLON, PERIOD, BACKSLASH, GUARD, PROCVAR, RULEVAR, 
				LBRACKET, RBRACKET, NEGATIVE, MOD, 
				LOGAND, LOGIOR, LOGXOR, /* LOGNOT, */ ASH,
				HAT, TILDE, ASTERISK_ASTERISK,
				ASTERISK_DOT, SLASH_DOT, PLUS_DOT, MINUS_DOT,
				ASTERISK, SLASH, PLUS, MINUS, EXCLA, RULENAMESEP;
terminal Integer RULE;
terminal Integer TYPEDEF; //taguchi
terminal		QUOTED_STRING;
terminal String RELOP, STRING;
terminal String HL;//seiji
terminal String LINK_NAME, NUMBER_NAME, SYMBOL_NAME, ATOM_NAME, PATHED_ATOM_NAME;
terminal String CHAR_CODE_LITERAL;

non terminal SrcLink        Link;
non terminal SrcHyperLink   HyperLink;
non terminal SrcName        FuncName;
non terminal String         AtomName;
non terminal String         RuleName;
non terminal SrcAtom        QuotedOperatorAtom;
non terminal SrcElement     UnitAtom;
non terminal SrcElement     UnaryOpAtom;
non terminal SrcElement     Atom200;
non terminal SrcElement     Atom300;
non terminal SrcElement     Atom400;
non terminal SrcElement     Atom500;
non terminal SrcElement     Atom700;
non terminal SrcElement     Atom800;
non terminal SrcElement     Atom;

// 現状: (a,b)と(a,b:-c)で衝突するため、項内でのAtomListの採用が保留となっている。
// non terminal Object				AtomList;
// non terminal Object				AtomListRest;

non terminal SrcMembrane		Membrane;
non terminal SrcMembrane		UnnamedMembrane;
non terminal SrcRule			Rule;
non terminal SrcProcessContext	ProcessContext;
non terminal SrcRuleContext		RuleContext;
non terminal SrcContext			Context;
non terminal SrcElement			Process;
non terminal SrcRule			ProcessListContinuation;
non terminal LinkedList<SrcElement> ProcessList;
non terminal LinkedList<SrcElement> NonemptyProcessList;
non terminal LinkedList<SrcElement> WorldProcessList;
non terminal LinkedList<SrcElement> NonemptyWorldProcessList;
non terminal SrcAtom			List;
non terminal SrcElement         ListCdr;
non terminal LinkedList<SrcElement> BundleList;
non terminal LinkedList<SrcElement> LinkList;
non terminal LinkedList<SrcElement> NonemptyLinkList;
non terminal SrcLinkBundle		Bundle;
non terminal SrcAtom			Aggregate;
non terminal SrcTypeDef         TypeDef;
non terminal SrcRule			InitRule;

// start with WorldProcessList;
start with InitRule;

/* -------------Precedence and Associatively of Terminals Section----------- */

Link ::=
    LINK_NAME:name
      {: RESULT = new SrcLink(name.toString(), nameleft); :}
;

// ハイパーリンク，属性なしハイパーリンクは空文字列の属性名をもつものとして扱う
HyperLink ::=
    EXCLA LINK_NAME:name
      {: RESULT = new SrcHyperLink(name.toString(),new SrcName("")); :}
  | EXCLA LINK_NAME:name COLON FuncName:attr
      {: RESULT = new SrcHyperLink(name.toString(), attr); :}
;

// 引数なしまたは引数ありのアトムの名前として使用できるリテラル
FuncName ::=
//    ATOM_NAME:name
    AtomName:name
      {: RESULT = new SrcName(name); :}
  | QUOTED_STRING:name
      {: RESULT = new SrcName(name.toString(), SrcName.QUOTED); :}
  | SYMBOL_NAME:name
      {: RESULT = new SrcName(name.replaceAll("^'|'$","").replaceAll("''","'"), SrcName.SYMBOL); :}
  | STRING:name
      {: RESULT = new SrcName(name, SrcName.STRING); :}
  | PATHED_ATOM_NAME:name
      {: RESULT = new SrcName(name, SrcName.PATHED); :}
;

// [a-z][A-Za-z_0-9]* | [0-9]+
AtomName ::=
    ATOM_NAME:name
      {: RESULT = name.toString(); :}
  | MOD
      {: RESULT = "mod"; :}
  | LOGAND
      {: RESULT = "logand"; :}
  | LOGIOR
      {: RESULT = "logior"; :}
  | LOGXOR
      {: RESULT = "logxor"; :}
//  | LOGNOT
//      {: RESULT = "lognot"; :}
  | ASH
      {: RESULT = "ash"; :}
;

RuleName ::=
    ATOM_NAME:name
      {: RESULT = name.toString(); :}
  | LINK_NAME:name
      {: RESULT = name.toString(); :}
;

// 演算子が付いていない項
UnitAtom ::=
    NUMBER_NAME:name
      {: RESULT = new SrcAtom(new SrcName(name), nameleft, nameright); :}
  | CHAR_CODE_LITERAL:name
      {: RESULT = new SrcAtom(new SrcName(""+(int)name.charAt(2)), nameleft, nameright); :}
  | FuncName:name
      {: RESULT = new SrcAtom(name, nameleft, nameright); :}
  | FuncName:name LPAREN ProcessList:list RPAREN
      {: RESULT = new SrcAtom(name, list, nameleft, nameright); :}
  | List:list
      {: RESULT = list; :}
//				| LPAREN Rule:rule RPAREN
//					{: RESULT = rule; :}
  | LPAREN RuleName:name RULENAMESEP ProcessList:list ProcessListContinuation:rule
      {: rule.name = name;
         if (rule == null) {
           if (list.size() == 1) {
             RESULT = list.getFirst();
           }
           else {
             RESULT = new SrcList(list);
           }
         }
         else {
           rule.setHead(list);
           RESULT = rule;
         }
      :}
  | LPAREN ProcessList:list ProcessListContinuation:rule
      {: if (rule == null) {
           if (list.size() == 1) {
             RESULT = list.getFirst();
           }
           else {
             RESULT = new SrcList(list);
           }
         }
         else {
           rule.setHead(list);
           RESULT = rule;
         }
      :}
  | LPAREN QuotedOperatorAtom:atom RPAREN
      {: RESULT = atom; :}
  | Context:p
      {: RESULT = p; :}
//				| LPAREN Atom:atom RPAREN
//					{: RESULT = atom; :}
  | Link:link
      {: RESULT = link; :}
  | HyperLink:link
      {: RESULT = link; :}
  | Membrane:mem
      {: RESULT = mem; :}
;

UnaryOpAtom ::=
    UnitAtom:atom
      {: RESULT = atom; :}
  | PLUS UnitAtom:atom
      {: LinkedList list = new LinkedList();
         list.add(atom);
         RESULT = new SrcAtom("+", list); :}
  | MINUS UnitAtom:atom
      {: LinkedList list = new LinkedList();
         list.add(atom);
         RESULT = new SrcAtom("-", list); :}
  | PLUS_DOT UnitAtom:atom
      {: LinkedList list = new LinkedList();
         list.add(atom);
         RESULT = new SrcAtom("+.", list); :}
  | MINUS_DOT UnitAtom:atom
      {: LinkedList list = new LinkedList();
         list.add(atom);
         RESULT = new SrcAtom("-.", list); :}
//  | LOGNOT UnitAtom:atom
//      {: LinkedList list = new LinkedList();
//         list.add(atom);
//         RESULT = new SrcAtom("lognot", list); :}
;

Atom200 ::=
    UnaryOpAtom:atom
      {: RESULT = atom; :}
  | Atom200:atom1 HAT UnaryOpAtom:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("^", list); :}
;

Atom300 ::=
    Atom200:atom
      {: RESULT = atom; :}
  | Atom200:atom1 MOD Atom200:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("mod", list); :}
  | Atom300:atom1 ASTERISK_ASTERISK Atom200:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("**", list); :}
;

Atom400 ::=
    Atom300:atom
      {: RESULT = atom; :}
  | Atom400:atom1 ASTERISK_DOT Atom300:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("*.", list); :}
  | Atom400:atom1 SLASH_DOT Atom300:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("/.", list); :}
  | Atom400:atom1 ASTERISK Atom300:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("*", list); :}
  | Atom400:atom1 SLASH Atom300:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("/", list); :}
  | Atom400:atom1 LOGAND Atom300:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("logand", list); :}
  | Atom400:atom1 ASH Atom300:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("ash", list); :}
;

Atom500 ::=
    Atom400:atom
      {: RESULT = atom; :}
  | Atom500:atom1 MINUS_DOT Atom400:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("-.", list); :}
  | Atom500:atom1 PLUS_DOT Atom400:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("+.", list); :}
  | Atom500:atom1 MINUS Atom400:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("-", list); :}
  | Atom500:atom1 PLUS Atom400:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("+", list); :}
  | Atom500:atom1 LOGIOR Atom400:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("logior", list); :}
  | Atom500:atom1 LOGXOR Atom400:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom("logxor", list); :}
;

Atom700 ::=
    Atom500:atom
      {: RESULT = atom; :}
  | Atom500:atom1 HL:op Atom500:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom(op, list); :}
  | Atom500:atom1 RELOP:op Atom500:atom2
      {: LinkedList list = new LinkedList();
         list.add(atom1); list.add(atom2);
         RESULT = new SrcAtom(op, list); :}
;

// :の左側には ([a-z][A-Za-z_0-9]* | [0-9]+) のみを記述できる
Atom800 ::=
    Atom700:atom
      {: RESULT = atom; :}
  | AtomName:name COLON Atom800:atom
      {: LinkedList list = new LinkedList();
         list.add(new SrcAtom(new SrcName(name)));
         list.add(atom); RESULT = new SrcAtom(":", list); :}
;

// アトムや膜などから帰納的に構成される式。Atomという名称はもはや正しくない
Atom ::=
    Atom800:atom
      {: RESULT = atom; :}
;

// ( ) で囲って演算子が付いていない単独の項にできる演算子
QuotedOperatorAtom ::=
    PLUS              {: RESULT = new SrcAtom("+"); :}
  | MINUS             {: RESULT = new SrcAtom("-"); :}
  | EXCLA             {: RESULT = new SrcAtom("!"); :}
  | ASTERISK          {: RESULT = new SrcAtom("*"); :}
  | SLASH             {: RESULT = new SrcAtom("/"); :}
  | PLUS_DOT          {: RESULT = new SrcAtom("+."); :}
  | MINUS_DOT         {: RESULT = new SrcAtom("-."); :}
  | ASTERISK_DOT      {: RESULT = new SrcAtom("*."); :}
  | SLASH_DOT         {: RESULT = new SrcAtom("/."); :}
//| MOD               {: RESULT = new SrcAtom("mod"); :} //通常のアトム名として処理
  | RELOP:op          {: RESULT = new SrcAtom(op); :}
  | HL:op             {: RESULT = new SrcAtom(op); :} //seiji
  | HAT               {: RESULT = new SrcAtom("^"); :}
  | TILDE             {: RESULT = new SrcAtom("~"); :}
  | COLON             {: RESULT = new SrcAtom(":"); :}
  | ASTERISK_ASTERISK {: RESULT = new SrcAtom("**"); :}
;

List ::=
    LBRACKET RBRACKET
      {: RESULT = new SrcAtom("[]"); :}
  | LBRACKET Process:atom ListCdr:cdr RBRACKET
      {: LinkedList list = new LinkedList(); list.add(atom); list.add(cdr); RESULT = new SrcAtom(".", list); :}
;

ListCdr ::=
    GUARD Process:atom
      {: RESULT = atom; :}
  | COMMA Process:atom ListCdr:cdr
      {: LinkedList list = new LinkedList(); list.add(atom); list.add(cdr); RESULT = new SrcAtom(".", list); :}
  | /* epsilon */
      {: RESULT = new SrcAtom("[]"); :}
;

// Atomをカンマで区切った列。現在未使用
// AtomList ::=
//    Atom:atom AtomList:atomlist
//       {: if (atomlist == null) { RESULT = atom; }
//          else {
//            LinkedList list = new LinkedList();
//            list.add(atom); list.add(atomlist);
//            RESULT = new SrcAtom(",", list);
//          }
//       :}
// ;

// AtomListRest ::=
//     RPAREN
//      {: RESULT = null; :}
//   | COMMA Atom:atom AtomListRest:atomlist
//     {: LinkedList list = new LinkedList(); list.add(atom); list.add(atomlist); RESULT = new SrcAtom(",", list); :}
// ;

Membrane ::=
    UnnamedMembrane:mem
      {: RESULT = mem; :}
  | AtomName:name UnnamedMembrane:mem
      {: mem.name = name; RESULT = mem; :}
;

UnnamedMembrane ::=
				//AtomName:name COLON LBRACE WorldProcessList:list RBRACE_SLASH
				//	{: SrcMembrane sMem = new SrcMembrane(name, list);
				//	   sMem.stable = true;
				//	   RESULT = sMem; :}
				//| AtomName:name COLON LBRACE WorldProcessList:list RBRACE
				//	{: RESULT = new SrcMembrane(name, list); :}
				//|
    LBRACE WorldProcessList:list RBRACE_SLASH
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.stable = true; RESULT = sMem; :}
  | LBRACE WorldProcessList:list RBRACE
      {: RESULT = new SrcMembrane(list); :}
  | LBRACE WorldProcessList:list RBRACE_SLASH_AT UnitAtom:atom
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.stable = true; sMem.pragma = atom; RESULT = sMem; :}
  | LBRACE WorldProcessList:list RBRACE_AT UnitAtom:atom
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.pragma = atom; RESULT = sMem; :}
  | LBRACE WorldProcessList:list RBRACE_UNDERBAR_SLASH
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.stable = true; sMem.kind = 1; RESULT = sMem; :}
  | LBRACE WorldProcessList:list RBRACE_UNDERBAR
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.kind = 1; RESULT = sMem; :}
  | LBRACE WorldProcessList:list RBRACE_UNDERBAR_SLASH_AT UnitAtom:atom
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.stable = true; sMem.kind = 1; sMem.pragma = atom; RESULT = sMem; :}
  | LBRACE WorldProcessList:list RBRACE_UNDERBAR_AT UnitAtom:atom
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.kind = 1; sMem.pragma = atom; RESULT = sMem; :}
  | LBRACE WorldProcessList:list RBRACE_ASTERISK
      {: SrcMembrane sMem = new SrcMembrane(list); sMem.kind = runtime.Membrane.KIND_ND; RESULT = sMem; :}
;

// 丸カッコなしのルール構文
// ルール名に対応 by Hara
// 出現した行番号を追加 by Inui
// simpagationを追加 by Kudo
Rule ::=
    ProcessList:head RULE:lineno ProcessList:body
      {: RESULT = new SrcRule(null, head, body, lineno.intValue()); :}
  | RuleName:name RULENAMESEP ProcessList:head RULE:lineno ProcessList:body
      {: RESULT = new SrcRule(name, head, body, lineno.intValue()); :}
  | ProcessList:head RULE:lineno ProcessList:guard GUARD ProcessList:body
      {: RESULT = new SrcRule(null, head, guard, body, lineno.intValue()); :}
  | RuleName:name RULENAMESEP ProcessList:head RULE:lineno ProcessList:guard GUARD ProcessList:body
      {: RESULT = new SrcRule(name, head, guard, body, lineno.intValue()); :}
  | ProcessList:head BACKSLASH ProcessList:head2 RULE:lineno ProcessList:body
      {: RESULT = new SrcRule(null, head, head2, null, body, lineno.intValue()); :}
  | RuleName:name RULENAMESEP ProcessList:head BACKSLASH ProcessList:head2 RULE:lineno ProcessList:body
      {: RESULT = new SrcRule(name, head, head2, null, body, lineno.intValue()); :}
  | ProcessList:head BACKSLASH ProcessList:head2 RULE:lineno ProcessList:guard GUARD ProcessList:body
      {: RESULT = new SrcRule(null, head, head2, guard, body, lineno.intValue()); :}
  | RuleName:name RULENAMESEP ProcessList:head BACKSLASH ProcessList:head2 RULE:lineno ProcessList:guard GUARD ProcessList:body
      {: RESULT = new SrcRule(name, head, head2, guard, body, lineno.intValue()); :}
;

// 「丸カッコありのルール構文、または丸カッコとカンマによる項組構文」のための非終端記号
// こっちはルール名には非対応。(a,b,c :- ( 対応しているようだが…。)
// 出現した行番号を追加 by Inui
// simpagationを追加 by Kudo
ProcessListContinuation ::=
    RPAREN
      {: RESULT = null; :}
  | RULE:lineno ProcessList:body RPAREN
      {: RESULT = new SrcRule(null, null, body, lineno.intValue()); :}
  | RULE:lineno ProcessList:guard GUARD ProcessList:body RPAREN
      {: RESULT = new SrcRule(null, null, guard, body, lineno.intValue()); :}
  | BACKSLASH ProcessList:head2 RULE:lineno ProcessList:body RPAREN
      {: RESULT = new SrcRule(null, null, head2, null, body, lineno.intValue()); :}
  | BACKSLASH ProcessList:head2 RULE:lineno ProcessList:guard GUARD ProcessList:body RPAREN
      {: RESULT = new SrcRule(null, null, head2, guard, body, lineno.intValue()); :}
;

ProcessContext ::=
    PROCVAR AtomName:name
      {: RESULT = new SrcProcessContext(name); :}
  | PROCVAR AtomName:name LBRACKET LinkList:list RBRACKET
      {: SrcProcessContext pc = new SrcProcessContext(name); pc.args = list; RESULT = pc; :}
  | PROCVAR AtomName:name LBRACKET LinkList:list GUARD Bundle:bundle  RBRACKET
      {: SrcProcessContext pc = new SrcProcessContext(name); pc.args = list; pc.bundle = bundle; RESULT = pc; :}
;

RuleContext ::=
    RULEVAR AtomName:name
      {: RESULT = new SrcRuleContext(name); :}
;

Context ::=
    ProcessContext:p
      {: RESULT = p; :}
  | RuleContext:r
      {: RESULT = r; :}
;

Bundle ::=
    ASTERISK LINK_NAME:name
      {: RESULT = new SrcLinkBundle(name); :}
;

BundleList ::=
    Bundle:bundle
      {: LinkedList list = new LinkedList(); list.add(bundle); RESULT = list; :}
  | BundleList:list COMMA Bundle:bundle
      {: list.add(bundle); RESULT = list; :}
;

Aggregate ::=
    FuncName:name LPAREN BundleList:list RPAREN
      {: RESULT = new SrcAtom(name, list, nameleft, nameright); :}
;

LinkList ::=
    /* epsilon */
      {: RESULT = new LinkedList(); :}
  | NonemptyLinkList:list
      {: RESULT = list; :}
;

NonemptyLinkList ::=
    Link:link
      {: LinkedList list = new LinkedList(); list.add(link); RESULT = list; :}
  | NonemptyLinkList:list COMMA Link:link
      {: list.add(link); RESULT = list; :}
;

Process ::=
    Atom:p
      {:  RESULT = p; :}
  | NEGATIVE Atom:atom
      {: LinkedList list = new LinkedList(); list.add(atom); RESULT = new SrcAtom(new SrcName("\\+"), list, atomleft, atomright); :}
//				| NEGATIVE LPAREN AtomList:atomlist
//					{: LinkedList list = new LinkedList();
//					   list.add(atomlist);
//					   RESULT = new SrcAtom(new SrcName("\\+"), list, atomleft, atomright); :}
  | Aggregate:p
      {:  RESULT = p; :}
//				| Membrane:p
//					{:  RESULT = p; :}
//				| Rule:p
//					{:  RESULT = p; :}
//				| Context:p
//					{:  RESULT = p; :}
;

// Processをカンマで区切った列。
// （現在、構文エラーを減らすために、膜の前のカンマは省略できるという特別扱いが採用されている）
// -> 廃止しました。 2006/06/26 by kudo ( 膜名導入に際し衝突する為 )
ProcessList ::=
    /* epsilon */
      {: RESULT = new LinkedList(); :}
  | NonemptyProcessList:list
      {: RESULT = list; :}
  | NonemptyProcessList:list COMMA
      {: RESULT = list; :}
;

NonemptyProcessList ::=
    Process:p
      {: LinkedList list = new LinkedList(); list.add(p); RESULT = list; :}
// 膜名導入に際し、衝突するようになったので廃止。
//				| NonemptyProcessList:list Membrane:p
//					{: list.add(p); RESULT = list; :}
  | NonemptyProcessList:list COMMA Process:p
      {: list.add(p); RESULT = list; :}
;

// ProcessListおよびRuleをピリオドで区切った列。末尾に1つのピリオドを追加しても受理する。
WorldProcessList ::=
    /* epsilon */
      {: RESULT = new LinkedList(); :}
  | NonemptyWorldProcessList:list
      {: RESULT = list; :}
  | NonemptyWorldProcessList:list PERIOD
      {: RESULT = list; :}
;

NonemptyWorldProcessList ::=
    NonemptyProcessList:p
      {: RESULT = p; :}
  | Rule:p
      {: LinkedList list = new LinkedList(); list.add(p); RESULT = list; :}
  | NonemptyWorldProcessList:list PERIOD Rule:p
      {: list.add(p); RESULT = list; :}
  | NonemptyWorldProcessList:list PERIOD NonemptyProcessList:p
      {: list.addAll(p); RESULT = list; :}
  | TypeDef:typedef
      {: LinkedList list = new LinkedList(); list.add(typedef); RESULT = list; :}
  | NonemptyWorldProcessList:list PERIOD TypeDef:typedef
      {: list.add(typedef); RESULT = list; :}
;

// CSLMNtal の typedef 構文を受理。
TypeDef ::=
    TYPEDEF:lineno FuncName:name LPAREN NonemptyLinkList:linklist RPAREN LBRACE WorldProcessList:processlist RBRACE
        {: RESULT = new SrcTypeDef(name, linklist, processlist, lineno.intValue()); :}
;

// rule for creating toplevel
InitRule ::=
    WorldProcessList:body
      {: RESULT = new SrcRule("_init", new LinkedList(), body, 1); :}
;
